{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","Component","constructor","props","super","handleReportChange","e","this","setState","report","target","value","handleFightChange","fight","handleSubmit","URL","state","pathname","trimEnd","split","requestError","loading","errorMessage","info","fetch","then","res","json","setInfo","_err","preventDefault","error","console","log","fights","filter","name","pullLengths","getPullLengths","totalPulls","length","totalTime","formatTime","getTotalTime","longestPull","Math","max","medianPull","getMedianPull","reduce","a","b","sorted","sort","floor","middle_right","map","end_time","start_time","total_sec","min","hours","sec","round","render","createElement","className","onSubmit","type","onChange","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9b3b2d9b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      fight: \"Futures Rewritten\",\n      report: \"\",\n      errorMessage: \"\",\n      info: {},\n      requestError: false,\n      loading: false\n    };\n  }\n\n  handleReportChange = (e) => {\n    this.setState({report: e.target.value});\n  }\n\n  handleFightChange = (e) => {\n    this.setState({fight: e.target.value});\n  }\n\n  handleSubmit = (e) => {\n    const url = new URL(this.state.report)\n    const report = url.pathname.trimEnd(\"/\").split(\"/\")[2]\n    this.setState({requestError: false, loading: true, errorMessage: \"\", info: {}})\n    fetch(`https://www.fflogs.com/v1/report/fights/${report}?api_key=7ffe75b93491065c218baa9ece0d641d`)\n      .then(res => res.json())\n      .then(\n        (res) => {\n          this.setInfo(res, report)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (_err) => {\n          this.setState({\n            loading: false,\n            requestError: true\n          });\n        }\n      )\n    e.preventDefault();\n  }\n\n  setInfo(info, report) {\n    if (info.error) {\n      this.setState({ errorMessage: info.error })\n      return\n    }\n\n    console.log(info)\n\n    if (this.state.fight === \"all\") {\n      return info.fights\n    }\n\n    const fights = info.fights.filter(fight => fight.name === this.state.fight)\n    const pullLengths = this.getPullLengths(fights)\n\n\n    this.setState({\n      loading: false,\n      info: {\n        report: `https://www.fflogs.com/reports/${report}`,\n        totalPulls: pullLengths.length,\n        totalTime: this.formatTime(this.getTotalTime(pullLengths)),\n        longestPull: this.formatTime(Math.max(...pullLengths)),\n        medianPull: this.formatTime(this.getMedianPull(pullLengths)),\n      }\n    });\n  }\n\n  getTotalTime(fights) {\n    return fights.reduce(function(a, b){\n      return a + b;\n    }, 0);\n  }\n\n  getMedianPull(fights) {\n    const sorted = fights.sort(function(a, b){return a-b})\n    console.log(sorted)\n\n    if (sorted.length % 2) { // odd\n      const middle = Math.floor(sorted.length/2)\n\n      return sorted[middle]\n    }\n    // even\n    const middle_right = sorted.length/2\n    const middle_left = middle_right - 1\n\n    return (sorted[middle_left] + sorted[middle_right])/2\n  }\n\n  getPullLengths(fights) {\n    return fights.map(fight => {\n      return (fight.end_time - fight.start_time)/1000\n    })\n  }\n\n  formatTime(total_sec) {\n    var min = total_sec / 60\n    const hours = Math.floor(min / 60)\n    const sec = Math.round(total_sec % 60)\n    min = Math.floor(min % 60)\n\n    return hours > 0 ? `${hours}:${min}:${sec}` : `${min}:${sec}`\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>FFLogs Analyzer</h1>\n          <p>\n            Get stats on your report!\n          </p>\n          { this.state.requestError &&\n            <p className=\"error\" >Something went wrong!</p>\n          }\n          { this.state.errorMessage &&\n            <p className=\"error\">{this.state.errorMessage}</p>\n          }\n          <form onSubmit={this.handleSubmit}>\n            <p>\n              <label>\n                Report:\n                <input type=\"text\" value={this.state.report} onChange={this.handleReportChange} />\n              </label>\n            </p>\n            <p>\n              <label>\n                Fight:\n                <select value={this.state.fight} onChange={this.handleFightChange}>\n                  <option value=\"all\">All</option>\n                  <option value=\"The Ultima Weapon\">Ultima Weapon (Ultimate)</option>\n                  <option value=\"Bahamut Prime\">Unending Coil of Bahamut (Ultimate)</option>\n                  <option value=\"The Epic of Alexander\">The Epic of Alexander (Ultimate)</option>\n                  <option value=\"Dragonsong's Reprise\">Dragonsong's Reprise (Ultimate)</option>\n                  <option value=\"Futures Rewritten\">Future's Rewritten (Ultimate)</option>\n                </select>\n              </label>\n            </p>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {this.state.info.totalPulls && <div>\n            <h3>\n              Stats\n            </h3>\n            <p><a className=\"error\" href={this.state.report} target=\"_blank\">view report</a></p>\n            <p>\n              total pulls: {this.state.info.totalPulls}\n            </p>\n            <p>\n              total time: {this.state.info.totalTime}\n            </p>\n            <p>\n              longest pull: {this.state.info.longestPull}\n            </p>\n            <p>\n              median pull: {this.state.info.medianPull}\n            </p>\n          </div>}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}